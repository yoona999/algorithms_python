# hash는 key를 사용해서 데이터 탐색
# 해시 테이블의 각 데이터 = "버킷"

# 나눗셈법
# h(x) = x mod k (k는 소수, x는 키)
# 나눗셈법은 해시 테이블의 크기가 K가 됨

# 곱셈법
# h(x) = (x * A mod 1) * m (m은 최대 버킷의 개수, A는 황금비 = 0.6183, 소수 이용x)

# 문자열 hashing
# hash(s) = (s[0] * p^(n-1) + s[1] * p^(n-2) + ... + s[n-1] * p^(n-1)) mod m 
# p는 홀수이면서 메르센 소수인 31로 정하고, m은 해시 테이블 최대 크기
# 해시 함수를 적용한 값이 해시 테이블 크기에 비해 너무 클 수 있기에 문자열 해시 함수를 나중에는 수정해줘야!


# 충돌: 서로 다른 키에 대해서 해시 함수의 결괏값이 동일한 경우
# 충돌 해결 방법
# 1. 체이닝: 해시 테이블의 각 버킷에 연결 리스트를 사용하여 충돌 해결
    # 충돌이 많아지면 그만큼 링크드 리스트의 길이가 길어지고, 다른 해시 테이블의 공간은 덜 사용하므로 공간 활용성 떨어짐
# 2. 개방 주소법: 충돌이 발생하면 해시 테이블 내에서 다른 빈 버킷을 찾아 충돌값을 저장
# 3. 선형 해싱: 충돌이 발생하면 다음 버킷을 검사(한칸씩 이동)하여 빈 버킷을 찾음 -> 해시 충돌한 값들이 모이는 영역이 생김 
# 4. 이중 해싱: 두 개의 해시 함수를 사용하여 충돌 해결

